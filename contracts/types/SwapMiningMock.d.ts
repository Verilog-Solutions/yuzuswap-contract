/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SwapMiningMockInterface extends ethers.utils.Interface {
  functions: {
    "balance(address,address)": FunctionFragment;
    "recorder(address,address)": FunctionFragment;
    "swap(address,address,address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "balance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "recorder",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recorder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;

  events: {};
}

export class SwapMiningMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SwapMiningMockInterface;

  functions: {
    balance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balance(address,address)"(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    recorder(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "recorder(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    swap(
      account: string,
      input: string,
      output: string,
      inAmount: BigNumberish,
      outAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swap(address,address,address,uint256,uint256)"(
      account: string,
      input: string,
      output: string,
      inAmount: BigNumberish,
      outAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  balance(
    account: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balance(address,address)"(
    account: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  recorder(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "recorder(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  swap(
    account: string,
    input: string,
    output: string,
    inAmount: BigNumberish,
    outAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swap(address,address,address,uint256,uint256)"(
    account: string,
    input: string,
    output: string,
    inAmount: BigNumberish,
    outAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    balance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balance(address,address)"(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recorder(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "recorder(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swap(
      account: string,
      input: string,
      output: string,
      inAmount: BigNumberish,
      outAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "swap(address,address,address,uint256,uint256)"(
      account: string,
      input: string,
      output: string,
      inAmount: BigNumberish,
      outAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    balance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balance(address,address)"(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recorder(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "recorder(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swap(
      account: string,
      input: string,
      output: string,
      inAmount: BigNumberish,
      outAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swap(address,address,address,uint256,uint256)"(
      account: string,
      input: string,
      output: string,
      inAmount: BigNumberish,
      outAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balance(address,address)"(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recorder(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "recorder(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swap(
      account: string,
      input: string,
      output: string,
      inAmount: BigNumberish,
      outAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swap(address,address,address,uint256,uint256)"(
      account: string,
      input: string,
      output: string,
      inAmount: BigNumberish,
      outAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
