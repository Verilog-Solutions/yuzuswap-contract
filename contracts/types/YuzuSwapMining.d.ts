/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface YuzuSwapMiningInterface extends ethers.utils.Interface {
  functions: {
    "add(uint256,address,address,bool)": FunctionFragment;
    "blockNumberOfHalfAttenuationCycle()": FunctionFragment;
    "factoryAddr()": FunctionFragment;
    "getYuzuBetweenBlocks(uint256,uint256)": FunctionFragment;
    "getYuzuFromStartblock(uint256,uint256,uint256,uint256)": FunctionFragment;
    "massUpdatePools()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingYuzu(uint256,address)": FunctionFragment;
    "pendingYuzuAll(address)": FunctionFragment;
    "poolInfo(uint256)": FunctionFragment;
    "poolLength()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "routerAddr()": FunctionFragment;
    "set(uint256,uint256,bool)": FunctionFragment;
    "startBlock()": FunctionFragment;
    "swap(address,address,address,uint256,uint256)": FunctionFragment;
    "tokenPairMapPoolPos(address)": FunctionFragment;
    "totalAllocPoint()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePool(uint256)": FunctionFragment;
    "userInfo(uint256,address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawAll()": FunctionFragment;
    "yuzu()": FunctionFragment;
    "yuzuPerBlock()": FunctionFragment;
    "yuzukeeper()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "add",
    values: [BigNumberish, string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "blockNumberOfHalfAttenuationCycle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "factoryAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getYuzuBetweenBlocks",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getYuzuFromStartblock",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "massUpdatePools",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingYuzu",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingYuzuAll",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "routerAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "startBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenPairMapPoolPos",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAllocPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "yuzu", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "yuzuPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "yuzukeeper",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blockNumberOfHalfAttenuationCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "factoryAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getYuzuBetweenBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getYuzuFromStartblock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "massUpdatePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingYuzu",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingYuzuAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "routerAddr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startBlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenPairMapPoolPos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "yuzu", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "yuzuPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "yuzukeeper", data: BytesLike): Result;

  events: {
    "MinedBySwap(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Withdraw(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MinedBySwap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class YuzuSwapMining extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: YuzuSwapMiningInterface;

  functions: {
    add(
      _allocPoint: BigNumberish,
      _archorTokenAddr: string,
      _anotherTokenAddr: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "add(uint256,address,address,bool)"(
      _allocPoint: BigNumberish,
      _archorTokenAddr: string,
      _anotherTokenAddr: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    blockNumberOfHalfAttenuationCycle(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "blockNumberOfHalfAttenuationCycle()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    factoryAddr(overrides?: CallOverrides): Promise<[string]>;

    "factoryAddr()"(overrides?: CallOverrides): Promise<[string]>;

    getYuzuBetweenBlocks(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getYuzuBetweenBlocks(uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getYuzuFromStartblock(
      _startBlock: BigNumberish,
      _blockNumberOfHalfAttenuationCycle: BigNumberish,
      _yuzuPerBlock: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getYuzuFromStartblock(uint256,uint256,uint256,uint256)"(
      _startBlock: BigNumberish,
      _blockNumberOfHalfAttenuationCycle: BigNumberish,
      _yuzuPerBlock: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    massUpdatePools(overrides?: Overrides): Promise<ContractTransaction>;

    "massUpdatePools()"(overrides?: Overrides): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pendingYuzu(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "pendingYuzu(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pendingYuzuAll(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "pendingYuzuAll(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        lpToken: string;
        archorTokenAddr: string;
        lpTokenTotal: BigNumber;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accYuzuPerShare: BigNumber;
      }
    >;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        lpToken: string;
        archorTokenAddr: string;
        lpTokenTotal: BigNumber;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accYuzuPerShare: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "poolLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    routerAddr(overrides?: CallOverrides): Promise<[string]>;

    "routerAddr()"(overrides?: CallOverrides): Promise<[string]>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "set(uint256,uint256,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    startBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "startBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    swap(
      account: string,
      input: string,
      output: string,
      inAmount: BigNumberish,
      outAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swap(address,address,address,uint256,uint256)"(
      account: string,
      input: string,
      output: string,
      inAmount: BigNumberish,
      outAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokenPairMapPoolPos(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "tokenPairMapPoolPos(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    withdraw(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawAll(overrides?: Overrides): Promise<ContractTransaction>;

    "withdrawAll()"(overrides?: Overrides): Promise<ContractTransaction>;

    yuzu(overrides?: CallOverrides): Promise<[string]>;

    "yuzu()"(overrides?: CallOverrides): Promise<[string]>;

    yuzuPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "yuzuPerBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    yuzukeeper(overrides?: CallOverrides): Promise<[string]>;

    "yuzukeeper()"(overrides?: CallOverrides): Promise<[string]>;
  };

  add(
    _allocPoint: BigNumberish,
    _archorTokenAddr: string,
    _anotherTokenAddr: string,
    _withUpdate: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "add(uint256,address,address,bool)"(
    _allocPoint: BigNumberish,
    _archorTokenAddr: string,
    _anotherTokenAddr: string,
    _withUpdate: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  blockNumberOfHalfAttenuationCycle(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "blockNumberOfHalfAttenuationCycle()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  factoryAddr(overrides?: CallOverrides): Promise<string>;

  "factoryAddr()"(overrides?: CallOverrides): Promise<string>;

  getYuzuBetweenBlocks(
    _from: BigNumberish,
    _to: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getYuzuBetweenBlocks(uint256,uint256)"(
    _from: BigNumberish,
    _to: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getYuzuFromStartblock(
    _startBlock: BigNumberish,
    _blockNumberOfHalfAttenuationCycle: BigNumberish,
    _yuzuPerBlock: BigNumberish,
    _to: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getYuzuFromStartblock(uint256,uint256,uint256,uint256)"(
    _startBlock: BigNumberish,
    _blockNumberOfHalfAttenuationCycle: BigNumberish,
    _yuzuPerBlock: BigNumberish,
    _to: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  massUpdatePools(overrides?: Overrides): Promise<ContractTransaction>;

  "massUpdatePools()"(overrides?: Overrides): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pendingYuzu(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pendingYuzu(uint256,address)"(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingYuzuAll(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "pendingYuzuAll(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      lpToken: string;
      archorTokenAddr: string;
      lpTokenTotal: BigNumber;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      accYuzuPerShare: BigNumber;
    }
  >;

  "poolInfo(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      lpToken: string;
      archorTokenAddr: string;
      lpTokenTotal: BigNumber;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      accYuzuPerShare: BigNumber;
    }
  >;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  routerAddr(overrides?: CallOverrides): Promise<string>;

  "routerAddr()"(overrides?: CallOverrides): Promise<string>;

  set(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _withUpdate: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "set(uint256,uint256,bool)"(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _withUpdate: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  startBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  swap(
    account: string,
    input: string,
    output: string,
    inAmount: BigNumberish,
    outAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swap(address,address,address,uint256,uint256)"(
    account: string,
    input: string,
    output: string,
    inAmount: BigNumberish,
    outAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokenPairMapPoolPos(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenPairMapPoolPos(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updatePool(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updatePool(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
  >;

  "userInfo(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
  >;

  withdraw(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawAll(overrides?: Overrides): Promise<ContractTransaction>;

  "withdrawAll()"(overrides?: Overrides): Promise<ContractTransaction>;

  yuzu(overrides?: CallOverrides): Promise<string>;

  "yuzu()"(overrides?: CallOverrides): Promise<string>;

  yuzuPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "yuzuPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  yuzukeeper(overrides?: CallOverrides): Promise<string>;

  "yuzukeeper()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    add(
      _allocPoint: BigNumberish,
      _archorTokenAddr: string,
      _anotherTokenAddr: string,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "add(uint256,address,address,bool)"(
      _allocPoint: BigNumberish,
      _archorTokenAddr: string,
      _anotherTokenAddr: string,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    blockNumberOfHalfAttenuationCycle(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "blockNumberOfHalfAttenuationCycle()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factoryAddr(overrides?: CallOverrides): Promise<string>;

    "factoryAddr()"(overrides?: CallOverrides): Promise<string>;

    getYuzuBetweenBlocks(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getYuzuBetweenBlocks(uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getYuzuFromStartblock(
      _startBlock: BigNumberish,
      _blockNumberOfHalfAttenuationCycle: BigNumberish,
      _yuzuPerBlock: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getYuzuFromStartblock(uint256,uint256,uint256,uint256)"(
      _startBlock: BigNumberish,
      _blockNumberOfHalfAttenuationCycle: BigNumberish,
      _yuzuPerBlock: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    massUpdatePools(overrides?: CallOverrides): Promise<void>;

    "massUpdatePools()"(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pendingYuzu(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingYuzu(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingYuzuAll(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingYuzuAll(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        lpToken: string;
        archorTokenAddr: string;
        lpTokenTotal: BigNumber;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accYuzuPerShare: BigNumber;
      }
    >;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        lpToken: string;
        archorTokenAddr: string;
        lpTokenTotal: BigNumber;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accYuzuPerShare: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    routerAddr(overrides?: CallOverrides): Promise<string>;

    "routerAddr()"(overrides?: CallOverrides): Promise<string>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "set(uint256,uint256,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    swap(
      account: string,
      input: string,
      output: string,
      inAmount: BigNumberish,
      outAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "swap(address,address,address,uint256,uint256)"(
      account: string,
      input: string,
      output: string,
      inAmount: BigNumberish,
      outAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenPairMapPoolPos(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenPairMapPoolPos(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePool(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    withdraw(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "withdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(overrides?: CallOverrides): Promise<void>;

    "withdrawAll()"(overrides?: CallOverrides): Promise<void>;

    yuzu(overrides?: CallOverrides): Promise<string>;

    "yuzu()"(overrides?: CallOverrides): Promise<string>;

    yuzuPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "yuzuPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    yuzukeeper(overrides?: CallOverrides): Promise<string>;

    "yuzukeeper()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    MinedBySwap(
      user: string | null,
      pid: BigNumberish | null,
      yuzuAmount: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Withdraw(
      user: string | null,
      pid: BigNumberish | null,
      lpBurned: null,
      yuzuAmount: null
    ): EventFilter;
  };

  estimateGas: {
    add(
      _allocPoint: BigNumberish,
      _archorTokenAddr: string,
      _anotherTokenAddr: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "add(uint256,address,address,bool)"(
      _allocPoint: BigNumberish,
      _archorTokenAddr: string,
      _anotherTokenAddr: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    blockNumberOfHalfAttenuationCycle(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "blockNumberOfHalfAttenuationCycle()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factoryAddr(overrides?: CallOverrides): Promise<BigNumber>;

    "factoryAddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    getYuzuBetweenBlocks(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getYuzuBetweenBlocks(uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getYuzuFromStartblock(
      _startBlock: BigNumberish,
      _blockNumberOfHalfAttenuationCycle: BigNumberish,
      _yuzuPerBlock: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getYuzuFromStartblock(uint256,uint256,uint256,uint256)"(
      _startBlock: BigNumberish,
      _blockNumberOfHalfAttenuationCycle: BigNumberish,
      _yuzuPerBlock: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    massUpdatePools(overrides?: Overrides): Promise<BigNumber>;

    "massUpdatePools()"(overrides?: Overrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingYuzu(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingYuzu(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingYuzuAll(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingYuzuAll(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    routerAddr(overrides?: CallOverrides): Promise<BigNumber>;

    "routerAddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "set(uint256,uint256,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    swap(
      account: string,
      input: string,
      output: string,
      inAmount: BigNumberish,
      outAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swap(address,address,address,uint256,uint256)"(
      account: string,
      input: string,
      output: string,
      inAmount: BigNumberish,
      outAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokenPairMapPoolPos(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenPairMapPoolPos(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updatePool(_pid: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(_pid: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "withdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawAll(overrides?: Overrides): Promise<BigNumber>;

    "withdrawAll()"(overrides?: Overrides): Promise<BigNumber>;

    yuzu(overrides?: CallOverrides): Promise<BigNumber>;

    "yuzu()"(overrides?: CallOverrides): Promise<BigNumber>;

    yuzuPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "yuzuPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    yuzukeeper(overrides?: CallOverrides): Promise<BigNumber>;

    "yuzukeeper()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    add(
      _allocPoint: BigNumberish,
      _archorTokenAddr: string,
      _anotherTokenAddr: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "add(uint256,address,address,bool)"(
      _allocPoint: BigNumberish,
      _archorTokenAddr: string,
      _anotherTokenAddr: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    blockNumberOfHalfAttenuationCycle(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "blockNumberOfHalfAttenuationCycle()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factoryAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factoryAddr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getYuzuBetweenBlocks(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getYuzuBetweenBlocks(uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getYuzuFromStartblock(
      _startBlock: BigNumberish,
      _blockNumberOfHalfAttenuationCycle: BigNumberish,
      _yuzuPerBlock: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getYuzuFromStartblock(uint256,uint256,uint256,uint256)"(
      _startBlock: BigNumberish,
      _blockNumberOfHalfAttenuationCycle: BigNumberish,
      _yuzuPerBlock: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    massUpdatePools(overrides?: Overrides): Promise<PopulatedTransaction>;

    "massUpdatePools()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingYuzu(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingYuzu(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingYuzuAll(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingYuzuAll(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    routerAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "routerAddr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "set(uint256,uint256,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    startBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "startBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swap(
      account: string,
      input: string,
      output: string,
      inAmount: BigNumberish,
      outAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swap(address,address,address,uint256,uint256)"(
      account: string,
      input: string,
      output: string,
      inAmount: BigNumberish,
      outAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokenPairMapPoolPos(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenPairMapPoolPos(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalAllocPoint()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawAll(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdrawAll()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    yuzu(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "yuzu()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    yuzuPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "yuzuPerBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    yuzukeeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "yuzukeeper()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
